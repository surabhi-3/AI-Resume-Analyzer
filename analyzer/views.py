from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
import os
import io
import base64
import matplotlib.pyplot as plt
from .utils import extract_text_from_pdf
from datetime import datetime
from django.http import HttpResponse
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
# Predefined skills
SKILLS = [
    "python", "django", "flask", "html", "css", "javascript", 
    "bootstrap", "react", "angular", "mysql", "mongodb", 
    "pandas", "numpy", "machine learning", "deep learning", 
    "api", "git", "java"
]

def generate_chart(score):
    """Generate a simple bar chart showing match vs gap."""
    plt.switch_backend('Agg')  # for Django servers without display
    plt.figure(figsize=(3, 3))
    plt.bar(['Match', 'Gap'], [score, 100 - score], color=['#4CAF50', '#F44336'])
    plt.title('Resume Match Percentage')
    plt.ylabel('Percentage')
    plt.tight_layout()

    # Convert chart to Base64
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    chart = base64.b64encode(buffer.getvalue()).decode('utf-8')
    buffer.close()
    return chart

def home(request):
    return render(request, 'analyzer/home.html')

def analyze_resume(request):
    if request.method == 'POST' and request.FILES['resume']:
        resume_file = request.FILES['resume']
        fs = FileSystemStorage()
        file_path = fs.save(resume_file.name, resume_file)
        full_path = fs.path(file_path)

        resume_text = extract_text_from_pdf(full_path)
        job_desc = request.POST.get('job_desc').lower()

        resume_skills = [s for s in SKILLS if s in resume_text]
        job_skills = [s for s in SKILLS if s in job_desc]

        matched = set(resume_skills).intersection(set(job_skills))
        missing = set(job_skills) - set(resume_skills)
        score = round((len(matched) / len(job_skills)) * 100, 2) if job_skills else 0

        suggestions = (
            "Add these missing skills: " + ", ".join(missing)
            if missing else "Excellent match! Your resume fits the job well."
        )

        chart = generate_chart(score)

        context = {
            "result": {
                "score": score,
                "missing_skills": ", ".join(missing) if missing else "None",
                "suggestions": suggestions,
                "chart": chart
            }
        }

        os.remove(full_path)

        return render(request, 'analyzer/home.html', context)

    return render(request, 'analyzer/home.html')




def download_report(request):
    if request.method == 'POST':
        score = request.POST.get('score')
        missing = request.POST.get('missing_skills')
        suggestions = request.POST.get('suggestions')

        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="Resume_Analysis_Report.pdf"'

        p = canvas.Canvas(response, pagesize=A4)
        width, height = A4

        # Add Name or Logo at the top
        # Option 1: Text Name
        p.setFont("Helvetica-Bold", 18)
        p.setFillColorRGB(0.1, 0.3, 0.6)
        p.drawString(1 * inch, height - 0.8 * inch, "AI Resume Analyzer")

        p.setFont("Helvetica", 12)
        p.setFillColorRGB(0, 0, 0)
        p.drawString(1 * inch, height - 1.2 * inch, "Generated by: Surabhi Sonam")

        # Option 2 (Optional): Add logo image if available
        # Example: p.drawImage("path_to_logo.png", 1*inch, height - 1.5*inch, width=80, height=40)

        # Add timestamp
        timestamp = datetime.now().strftime("%d %B %Y, %I:%M %p")
        p.setFont("Helvetica-Oblique", 10)
        p.setFillColorRGB(0.4, 0.4, 0.4)
        p.drawString(1 * inch, height - 1.5 * inch, f"Generated on: {timestamp}")

        # Section Title
        p.setFont("Helvetica-Bold", 16)
        p.setFillColorRGB(0, 0, 0)
        p.drawString(1 * inch, height - 2.2 * inch, "ðŸ“„ Resume Analysis Report")

        # Analysis details
        p.setFont("Helvetica", 12)
        y = height - 2.8 * inch
        p.drawString(1 * inch, y, f"Match Score: {score}%")
        y -= 0.4 * inch
        p.drawString(1 * inch, y, f"Missing Skills: {missing}")
        y -= 0.4 * inch
        p.drawString(1 * inch, y, f"Suggestions: {suggestions}")

        # Footer line
        p.setFont("Helvetica-Oblique", 9)
        p.setFillColorRGB(0.5, 0.5, 0.5)
        p.drawString(1 * inch, 0.75 * inch, "Generated by AI Resume Analyzer | Â© 2025 Surabhi Sonam")

        p.showPage()
        p.save()
        return response
